#!/usr/bin/env node
/*
  vue init 是用来构建项目命令 也是vue-cli的核心文件

  1.vue-cli 会先判断你的模板在远程github仓库上还是在你的本地的某个文件里 
    如果是本地文件夹 则会直接读取本地模板 反之则会将模板存到本地
  
  2.存入本地时 会判断是否为官方模板 官方文档则会从官方github仓库中下载模板到本地的默认仓库下 即根目录下 .vue-templates文件夹下

  3.读取模板目录下 meta.json 或 meta.js 文件 根据里面的内容会询问开发者 根据开发者的回答 确定一些修改

  4.渲染出项目结构并生成到指定的目录
  
*/

// 从仓库提取git存储库
const download = require('download-git-repo')
// 主要用于创建子命令 切割命令行参数并执行
const program = require('commander')
// 检查文件是否存在
const exists = require('fs').existsSync
// 路径模块 处理文件和目录路径 如路径切割 文件路径格式化 json格式化
const path = require('path')
// 漂亮的loading
const ora = require('ora')
// 获取用户主目录的路径
const home = require('user-home')
// 绝对路径转化为相对路径
const tildify = require('tildify')
// 美化
const chalk = require('chalk')
// 常用的交互式命令行用户界面的集合 表现是控制台输出的提问
const inquirer = require('inquirer')
const rm = require('rimraf').sync
const logger = require('../lib/logger')
const generate = require('../lib/generate')
const checkVersion = require('../lib/check-version')
const warnings = require('../lib/warnings')
const localPath = require('../lib/local-path')

const isLocalPath = localPath.isLocalPath
const getTemplatePath = localPath.getTemplatePath

/**
 * Usage.
 */

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template')

/**
 * Help.
 */

program.on('--help', () => {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project with an official template'))
  console.log('    $ vue init webpack my-project')
  console.log()
  console.log(chalk.gray('    # create a new project straight from a github template'))
  console.log('    $ vue init username/repo my-project')
  console.log()
})

/**
 * Help.
 */

function help () {
  program.parse(process.argv)
  // 如果没有输入参数 终端显示帮助
  if (program.args.length < 1) return program.help()
}
help()

/**
 * Settings.
 * 定义了一堆变量
 */
// vue init的第一个参数 模板名称
let template = program.args[0]
// 是否有斜杆 后面将会用来判断是否为官方文档
const hasSlash = template.indexOf('/') > -1 

// vue init的第二个参数 项目构建目录名称
const rawName = program.args[1]
// 没写 或者 是. 表示当前目录下构建项目
const inPlace = !rawName || rawName === '.'
// process.cwd()返回nodejs进程当前工作的目录
// 如果在当前目录下构建项目 当前目录名为项目构建目录名 否则是当前目录下的子目录 rawName 为项目构建目录名
const name = inPlace ? path.relative('../', process.cwd()) : rawName
// 项目构建目录的绝对路径
const to = path.resolve(rawName || '.')
// 是否采用clone 模式 提供 download-git-repo 的参数
const clone = program.clone || false

// path.join() 方法使用平台特定的分隔符把全部给定的 path 片段连接到一起，并规范化生成的路径

// home => /Users/Administrator.PC-20161117IECM
// tmp  => /Users/Administrator.PC-20161117IECM/.vue-templates/webpack 该路径下是模板文件
// 远程模板下载到本地
const tmp = path.join(home, '.vue-templates', template.replace(/\//g, '-'))

// 判断用户是否输入 offline 如果是线下，则template直接取这个路径，使用之前缓存的模板 否则需要去线上仓库下载
if (program.offline) {
  console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
  template = tmp
}

/**
 * Padding.
 */

console.log()
process.on('exit', () => {
  console.log()
})

/**
 * vue-cli 会判断 exists(to) true则会询问开发者 当回答yes的时候执行run() 否则直接执行run() 
 * 询问两个问题
 * Generate project in current directory? //是否在当前目录下构建项目
 * Target directory exists. Continue? //构建目录已存在,是否继续
 * 
 * 这两个问题依靠变量inPlace来选择，下面我看一下变量inPlace是怎么得来的
 * const rawName = program.args[1]  //rawName为命令行的第二个参数（项目构建目录的相对目录）
 * const inPlace = !rawName || rawName === '.'  //rawName存在或者为“.”的时候，视为在当前目录下构建
 * 
 * 通过上面的描述可知 变量inPlace 用于判断是否在当前文件夹下构建 因此变量inPlace为true时 则会提示
 * Generate project in current directory?
 * 反之为false时 此时exists(to)一定为true 便提示 Target directory exists. Continue?
 * 
 * 
 * run函数逻辑
 * 
 *                               _____模板是否在本地____
 *                              ||                    ||
 *                              ||                    ||
 *                              \/                    \/
 *                       模板路径是否存在             检查版本
 *                       ||           ||              ||
 *                  存在 ||           || 不存在        ||
 *                       \/           \/              \/
 *                       构建项目     报错       是否为官方版本
 *                         /|\                  ||          ||
 *                          |                   ||          ||
 *                          |                   \/          \/
 *                          |---------------下载官方模板  下载第三方模板
 *                          |                                |
 *                          |--------------------------------|
 * 
 * 
 *      
 */
if (exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? 'Generate project in current directory?'
      : 'Target directory exists. Continue?',
    name: 'ok'
  }]).then(answers => {
    if (answers.ok) {
      run()
    }
  }).catch(logger.fatal)
} else {
  run()
}

/**
 * Check, download and generate the project.
 */

function run () {
  // check if template is local 检查模板是否是本地下载
  if (isLocalPath(template)) {
    // 获取绝对路径
    const templatePath = getTemplatePath(template)
    // 判断模板所在路径是否存在
    if (exists(templatePath)) {
      generate(name, templatePath, to, err => {
        if (err) logger.fatal(err)
        console.log()
        logger.success('Generated "%s".', name)
      })
    } else {
      //打印错误日志，提示本地模板不存在
      logger.fatal('Local template "%s" not found.', template)
    }
  } else {
    // 检查版本号
    checkVersion(() => {
      // 官方模板还是第三方模板
      if (!hasSlash) {
        // use official templates
        const officialTemplate = 'vuejs-templates/' + template
        // 模板名是否带#
        if (template.indexOf('#') !== -1) {
          // 下载模板
          downloadAndGenerate(officialTemplate)
        } else {
          if (template.indexOf('-2.0') !== -1) {
            // 警告
            warnings.v2SuffixTemplatesDeprecated(template, inPlace ? '' : name)
            return
          }

          // warnings.v2BranchIsNowDefault(template, inPlace ? '' : name)
          // 下载模板
          downloadAndGenerate(officialTemplate)
        }
      } else {
        // 下载模板
        downloadAndGenerate(template)
      }
    })
  }
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template) {
  const spinner = ora('downloading template')
  // 显示加载状态
  spinner.start()
  // Remove if local template exists
  // 当前模板库是否存在模板 存在就删除
  if (exists(tmp)) rm(tmp)
  // 下载模板
  // template模板名 tmp模板路径 clone是否采用git clone模板 err错误短信
  download(template, tmp, { clone }, err => {
    // 隐藏加载状态
    spinner.stop()
    // 有错误 打印错误
    if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
    // 渲染模板
    generate(name, tmp, to, err => {
      if (err) logger.fatal(err)
      console.log()
      logger.success('Generated "%s".', name)
    })
  })
}
